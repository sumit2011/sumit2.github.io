[{"categories":null,"content":"About me","date":"07-01-2023","objectID":"/about/","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Hii, my name is Sumit Kumar, i am currently pursuing B.Tech at NIT Srinagar. I’m interested in cybersecurity and competitive programming and love to solve problems. I’m also a part of z3r0d4y(a cybersecurity club at NIT Srinagar). I have the following qualities: I’m curious to learn new things. I’m extremely loyal to my family and friends. Resume ","date":"07-01-2023","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Skills ","date":"07-01-2023","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Cybersecurity To be honest I’m just a beginner at this stage and interested to learn all about hacking. I’m currently learning hacking from the following platforms. Platform: THM , HTB , Hacker-X. THM Certificates THM Badges THM Pwned Machines Hacker-X Certificates Tools ","date":"07-01-2023","objectID":"/about/:1:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Programming I’m also learning Data Structure and Algorithm, C++, C, Python. Platform: codechef, coding ninja. Languages ","date":"07-01-2023","objectID":"/about/:1:2","tags":null,"title":"About me","uri":"/about/"},{"categories":["Cyber Security"],"content":"Here i will help you in your jr penetration tester pathway on THM. ","date":"05-01-2023","objectID":"/jr-penetration-tester/:0:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Introduction to Cyber Security ","date":"05-01-2023","objectID":"/jr-penetration-tester/:1:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Intro to Offensive Security Task1: Hacking your first machine Q1. When you’ve transferred money to your account, go back to your bank account page. What is the answer shown on your bank balance page? Ans-BANK-HACKED Q2. If you were a penetration tester or security consultant, this is an exercise you’d perform for companies to test for vulnerabilities in their web applications; find hidden pages to investigate for vulnerabilities. No Answer Needed Q3. Terminate the machine by clicking the red “Terminate” button at the top of the page. No Answer Needed Task 2: What is Offensive Security? No answer needed Task 3: Careers in cyber security No answer needed ","date":"05-01-2023","objectID":"/jr-penetration-tester/:1:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Intro to Defensive Security Task 1 Introduction to Defensive Security Which team focuses on defensive security? Ans-Blue Team Task 2 Areas of Defensive Security What would you call a team of cyber security professionals that monitors a network and its systems for malicious events? Ans- Security Operations Center What does DFIR stand for? Ans- Digital Forensics and Incident Response Which kind of malware requires the user to pay money to regain access to their files? Ans- ransomware Task 3 Practical Example of Defensive Security What is the flag that you obtained by following along? Ans- THM{THREAT-BLOCKED} ","date":"05-01-2023","objectID":"/jr-penetration-tester/:1:2","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Careers in Cyber Task 1 Introduction Task 2 Security Analyst ","date":"05-01-2023","objectID":"/jr-penetration-tester/:1:3","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Introduction to Pentesting ","date":"05-01-2023","objectID":"/jr-penetration-tester/:2:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Pentesting Fundamentals Task 1 What is Penetration Testing? No Answer Needed. Task 2 Penetration Testing Ethics q1. You are given permission to perform a security audit on an organisation; what type of hacker would you be? Ans- White Hat Q2. You attack an organisation and steal their data, what type of hacker would you be? Ans- Black Hat Q3. What document defines how a penetration testing engagement should be carried out? Ans- Rules of Engagement Task 3 Penetration Testing Methodologies Q1. What stage of penetration testing involves using publicly available information? Ans- Information Gathering Q2. If you wanted to use a framework for pentesting telecommunications, what framework would you use? Note: We’re looking for the acronym here and not the full name. Ans- OSSTMM Q3. What framework focuses on the testing of web applications? Ans- OWASP Task 4 Black box, White box, Grey box Penetration Testing Q1. You are asked to test an application but are not given access to its source code - what testing process is this? Ans- Black Box Q2.You are asked to test a website, and you are given access to the source code - what testing process is this? Ans- White Box Task 5 Practical: ACME Penetration Test Q1. Complete the penetration test engagement against ACME’s infrastructure. Ans- THM{PENTEST_COMPLETE} ","date":"05-01-2023","objectID":"/jr-penetration-tester/:2:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Principles of Security Task 1 Introduction No Answer Needed. Task 2 The CIA Triad Q1. What element of the CIA triad ensures that data cannot be altered by unauthorised people? Ans- integrity Q2. What element of the CIA triad ensures that data is available? Ans- availability Q3. What element of the CIA triad ensures that data is only accessed by authorised people? Ans- confidentiality Task 3 Principles of Privileges Q1. What does the acronym “PIM” stand for? Ans- Privileged Identity Management Q2. What does the acronym “PAM” stand for? Ans- Privileged Access Management Q3. If you wanted to manage the privileges a system access role had, what methodology would you use? Ans- PAM Q4. If you wanted to create a system role that is based on a users role/responsibilities with an organisation, what methodology is this? Ans- PIM Task 4 Security Models Continued Q1. What is the name of the model that uses the rule “can’t read up, can read down”? Ans- the bell-lapadula model Q2. What is the name of the model that uses the rule “can read up, can’t read down”? Ans- the biba model Q3. If you were a military, what security model would you use? Ans- the bell-lapadula model Q4. If you were a software developer, what security model would the company perhaps use? Ans- the biba model Task 5 Threat Modelling \u0026 Incident Response Q1. What model outlines “Spoofing”? Ans- stride Q2. What does the acronym “IR” stand for? Ans- incident response Q3. You are tasked with adding some measures to an application to improve the integrity of data, what STRIDE principle is this? Ans- tampering Q4. An attacker has penetrated your organisation’s security and stolen data. It is your task to return the organisation to business as usual. What incident response stage is this? Ans- recovery ","date":"05-01-2023","objectID":"/jr-penetration-tester/:2:2","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["DSA"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"25-12-2022","objectID":"/single_linked_list/:0:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"1. Introduction: Single linked list is a linear data structure. It is slightly different from array. It made by the nodes, each nodes consist a data and the address of the next node and each node are linked using pointers. Here data are not stored in the contiguous memory location, nodes are present anywhere in the memory space but every nodes are linked with eachother that’s why we call this linked list. Main benefit of linked list is that we can insert or delete data from any position in the list. ","date":"25-12-2022","objectID":"/single_linked_list/:1:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"2. Creation of Node To create a new node in C++, you will need to define a structure or class that represents a node, and then create an instance of that structure or class. Here we will use structure to create or define a node. Here is an example of a node structure in C++ or C: struct Node { int data; struct Node *next; }; struct Node *head = NULL; ","date":"25-12-2022","objectID":"/single_linked_list/:2:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3. Insertion An insertion operation in a single linked list involves adding a new node to the list. For this first you have to create a newnode and then insert this node where you want. There are several ways to insert a node in the list: At the beginning of the list At the end of the list At a specific position of the list ","date":"25-12-2022","objectID":"/single_linked_list/:3:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.1 Insertion at Begining To insert a new node at the beginning of the list, you need to create a newnode and set it’s next pointer to point to the current head of the list. Then, you can set the head of the list to the newnode. You also have to check whether the first node is present or not in the list or we can say list is empty or not. // insertion at begining void insertAtBeg(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { newnode-\u003enext = head; head = newnode; } printf(\"%d is inserted at beginning.\\n\", value); } ","date":"25-12-2022","objectID":"/single_linked_list/:3:1","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.2 Insertion at Last To insert a new node at the end of the list, you need to traverse the list until you reach the last node. Then, you can set the next pointer of the last node to point to the newnode. If the list is empty then set the head to the newnode. temp is just a temporary node just like count variable, after the operation it does’nt have any importance. // insertation at end void insertATend(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { struct Node *temp; temp = head; while (temp-\u003enext != NULL) { temp = temp-\u003enext; } temp-\u003enext = newnode; newnode-\u003enext = NULL; } printf(\"%d is inserted at the end.\\n\", value); } Traversal Technique Traversal is the process or technique of visiting and processing each node in a data structure, such as a linked list, tree, or graph. There are several way to traverse. Here we use the simple traversal technique in which we form a temp variable or node and traverse the each node one by one just pointing to the next pointer to the temp. temp=temp-\u003enext; ","date":"25-12-2022","objectID":"/single_linked_list/:3:2","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.3 Insertion at Any Position To insert a new node at a desired position in the list, first you need to make a temporary node say temp initialise with head then traverse the list until you reach the node before the position where you want to insert the newnode. Then, you can set the next pointer of the newnode to point to the node at the desired position, and set the next pointer of the node before the position to point to the newnode. // insertion at any position void insertAtPos(int pos, int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; struct Node *temp = NULL; int i = 1; temp = head; while (i \u003c pos - 1) { temp = temp-\u003enext; i++; } newnode-\u003enext = temp-\u003enext; temp-\u003enext = newnode; printf(\"%d is inserted at the %dth position.\\n\", value, pos); } Seg Fault Here you get a segmentation fault if you enter that position which are not exist in the list. For this first you have to check whether the position is present or not in the list then insert the node at that position. ","date":"25-12-2022","objectID":"/single_linked_list/:3:3","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4. Deletion A deletion operation in a single linked list involves removing a node from the list and free the space. First make a temp node, traverse to that node and do the operation. There are several ways to delete a node from the list: Deleting the head node Deleting the last node Deleting a node from the specific position of the list ","date":"25-12-2022","objectID":"/single_linked_list/:4:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.1 Deletion from Begining To delete the head node or first node, first you have to make a temp node initialise with head then set the head of the list to the next node in the list. Now free the temp. // deletion at begining void deleteatBeg() { if (head == NULL) { printf(\"The list is empty.\\n\"); } else { struct Node *temp; temp = head; head = head-\u003enext; printf(\"%d is deleted from the begining\\n\", temp-\u003edata); free(temp); } } ","date":"25-12-2022","objectID":"/single_linked_list/:4:1","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.2 Deletion from End To delete the last node, make a temp node traverse the list until you reach the second-to-last node. Set the temp to the last node of the list. Then, you can set the next pointer of the second-to-last node to null. Now free the temp. // deletion at end void deleteatEnd() { if (head == NULL) { printf(\"The list is empty.\\n\"); } else { struct Node *temp, *prev; prev = temp = head; while (temp-\u003enext != NULL) { prev = temp; temp = temp-\u003enext; } prev-\u003enext = NULL; printf(\"%d is deleted from the end\\n\", temp-\u003edata); free(temp); } } ","date":"25-12-2022","objectID":"/single_linked_list/:4:2","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.3 Deletion from Any Position To delete a node in the middle of the list, you need to traverse the list until you reach the node before the one you want to delete. Set the temp to the node to be deleted in the list. Then, you can set the next pointer of the previous node to point to the node after the one you want to delete. Free the temp. // deletion at any position void deleteatPos(int pos) { struct Node *nextnode, *temp; int i = 1; nextnode = temp = head; while (i \u003c pos) { temp = nextnode; nextnode = nextnode-\u003enext; i++; } temp-\u003enext = nextnode-\u003enext; printf(\"%d is deleted from the %dth position.\\n\", nextnode-\u003edata, pos); free(nextnode); } Seg Fault Here also you get a segmentation fault if you delete that position which are not exist in the list. For this first you have to check whether the position is present or not in the list then delete the node from that position. ","date":"25-12-2022","objectID":"/single_linked_list/:4:3","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"5. Sorting There are several way to sort the list. // sorting of linked list void sortlist() { struct Node *ptr, *cpt; ptr = head; int temp; while (ptr-\u003enext != NULL) { cpt = ptr-\u003enext; while (cpt != NULL) { if (ptr-\u003edata \u003e cpt-\u003edata) { temp = ptr-\u003edata; ptr-\u003edata = cpt-\u003edata; cpt-\u003edata = temp; } cpt = cpt-\u003enext; } ptr = ptr-\u003enext; } printf(\"The list is sorted successfully.\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:5:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"6. Reversing To reverse the linked list, You have to iterate the linked list and for each node, changing the next pointer to point to the previous node instead of the next node as it traverses the linked list. This effectively reverses the order of the nodes in the linked list. The function returns the reversed linked list by returning the last node in the original linked list as the new head. // to reverse the list void reverse() { struct Node *current = head; struct Node *prev = NULL, *next = NULL; while (current != NULL) { next = current-\u003enext; current-\u003enext = prev; prev = current; current = next; } head = prev; printf(\"The list is reversed successfully.\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:6:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"7. Print Function To print the list you have to travarse the list and print each node one by one. For this make a temp node initialise with head, travarse and print. // printing of linked list void display() { printf(\"The list is: \"); struct Node *temp; temp = head; while (temp != NULL) { printf(\"%d \", temp-\u003edata); temp = temp-\u003enext; } printf(\"\\n\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:7:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"8. To Find Length To find the length of the list, first make a temp node initialise with head than travarse the list and increment the count by 1 on every travarsal until you reach to the last node. At last print the count value. // length of the linked int getlength() { int count = 0; struct Node *temp = head; while (temp != NULL) { count++; temp = temp-\u003enext; } printf(\"Total nodes present in the list is: %d\\n\", count); } ","date":"25-12-2022","objectID":"/single_linked_list/:8:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"9. Main Function In the main function. we check all the function whether they are working or not, call all the functions one by one. // main function int main() { insertAtBeg(34); insertAtBeg(45); insertAtBeg(72); insertAtBeg(50); insertAtBeg(89); insertAtBeg(99); insertATend(23); insertATend(55); insertATend(13); insertATend(41); insertAtPos(6, 8992); display(); deleteatBeg(); deleteatEnd(); deleteatPos(3); display(); sortlist(); display(); insertATend(58); display(); reverse(); display(); insertAtBeg(99); insertATend(23); display(); getlength(); return 0; } Note It will be a better practice if you take the input from the user in the output terminal. Then the main function will be: // main function int main() { int choice,value,pos; printf(\"1) Insert at begining\\n\"); printf(\"2) insert at last\\n\"); printf(\"3) Insert at any position\\n\"); printf(\"4) Delete from the begining\\n\"); printf(\"5) Delete from the end\\n\"); printf(\"6) Delete from any position\\n\"); printf(\"7) Sort the list\\n\"); printf(\"8) Reverse the list\\n\"); printf(\"9) Fint the length of the list\\n\"); printf(\"10) Display the list\\n\"); printf(\"11) Exit\\n\") do { printf(\"Enter Choice: \"); scanf(\"%d\",\u0026choice); switch (choice) { case 1: printf(\"Enter value to be inserted: \"); scanf(\"%d\",\u0026value); insertAtBeg(value); break; case 2: printf(\"Enter value to be inserted: \"); scanf(\"%d\",\u0026value); insertATend(value); break; case 3: printf(\"Enter the position and the value to be inserted respectively: \"); scanf(\"%d%d\",\u0026pos,\u0026value); insertAtPos(pos,value); break; case 4: deleteatBeg(); break; case 5: deleteatEnd(); break; case 6: printf(\"Enter the position of the node to be deleted: \"); scanf(\"%d\",\u0026pos); deleteatPos(pos); break; case 7: sortlist(); break; case 8: reverse(); break; case 9: getlength(); break; case 10: display(); break; case 11: printf(\"Exit\"); break; default: break; } } while (choice!=11) return 0; } Complete Code of Single Linked List: Code Fun Dose Problems Linked List 1 (CodeChef) Linked List 2 (CodeChef) Reversed Linked List (HackerEarth) Remove Friends (HackerEarth) ","date":"25-12-2022","objectID":"/single_linked_list/:9:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"}]