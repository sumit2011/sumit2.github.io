[{"categories":null,"content":"introduction: Single linked list is a linear data structure. Itâ€™s elements are not stored in contiguous memory location like arrays. it is slightly different from array. it made by the nodes, each nodes consist a data and the address of the next node and each nodes are linked using pointers. ","date":"2023-01-04","objectID":"/first_post/:1:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"creation of node To create a new node in C++, you will need to define a structure or class that represents a node, and then create an instance of that structure or class. Here is an example of a node structure in C++: struct Node { int value; Node* next; }; ","date":"2023-01-04","objectID":"/first_post/:2:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"insertion ","date":"2023-01-04","objectID":"/first_post/:3:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"insertion at begining void insertAtBeg(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { newnode-\u003enext = head; head = newnode; } printf(\"\\n\\n*Inserted successfully at beginning*\\n\"); } ","date":"2023-01-04","objectID":"/first_post/:3:1","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"insertion at last void insertATend(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { struct Node *temp; temp = head; while (temp-\u003enext != NULL) { temp = temp-\u003enext; } temp-\u003enext = newnode; newnode-\u003enext = NULL; } printf(\"\\n\\n*Inserted Successfully in END *\\n\"); } ","date":"2023-01-04","objectID":"/first_post/:3:2","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"insertion at any position // insertion at any position void insertAtPos(int pos, int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; struct Node *temp = NULL; int i = 1; temp = head; while (i \u003c pos - 1) { temp = temp-\u003enext; i++; } newnode-\u003enext = temp-\u003enext; temp-\u003enext = newnode; } ","date":"2023-01-04","objectID":"/first_post/:3:3","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"Deletion ","date":"2023-01-04","objectID":"/first_post/:4:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"deletion from begining // deletion at begining void deletatBeg() { struct Node *temp; temp = head; head = head-\u003enext; free(temp); } ","date":"2023-01-04","objectID":"/first_post/:4:1","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"deletion from end // deletion at end void deletatEnd() { struct Node *temp, *prev; prev = temp = head; while (temp-\u003enext != NULL) { prev = temp; temp = temp-\u003enext; } prev-\u003enext = NULL; free(temp); } ","date":"2023-01-04","objectID":"/first_post/:4:2","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"deletion from any position // deletion at any position void deletatPos(int pos) { struct Node *nextnode, *temp; int i = 1; nextnode = temp = head; while (i \u003c pos) { temp = nextnode; nextnode = nextnode-\u003enext; i++; } temp-\u003enext = nextnode-\u003enext; free(nextnode); } ","date":"2023-01-04","objectID":"/first_post/:4:3","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"Sorting of the singly linked list // sorting of linked list void sortlist() { struct Node *ptr, *cpt; ptr = head; int temp; while (ptr-\u003enext != NULL) { cpt = ptr-\u003enext; while (cpt != NULL) { if (ptr-\u003edata \u003e cpt-\u003edata) { temp = ptr-\u003edata; ptr-\u003edata = cpt-\u003edata; cpt-\u003edata = temp; } cpt = cpt-\u003enext; } ptr = ptr-\u003enext; } } ","date":"2023-01-04","objectID":"/first_post/:5:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"Print function // printing of linked list void print() { struct Node *temp; temp = head; while (temp != NULL) { printf(\"%d--\u003e\", temp-\u003edata); temp = temp-\u003enext; } printf(\"NULL\"); } ","date":"2023-01-04","objectID":"/first_post/:6:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"to find length // length of the linked int getlength() { int len = 0; struct Node *temp = head; while (temp != NULL) { len++; temp = temp-\u003enext; } printf(\"%d\", len); } ","date":"2023-01-04","objectID":"/first_post/:7:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"Main function // main function int main() { // int a; // printf(\"how many elements do you want enter= \"); // scanf(\"%d\", \u0026a); // for (int i = 0; i \u003c a; i++) // { // int data; // scanf(\"%d\", \u0026data); // insertATend(data); // } // print(); insertAtBeg(34); insertAtBeg(45); insertAtBeg(72); insertAtBeg(5); insertAtBeg(89); insertAtBeg(99); insertATend(23); insertATend(55); insertATend(13); insertATend(41); insertAtPos(6, 8992); print(); printf(\"\\n\"); deletatBeg(); deletatEnd(); deletatPos(3); print(); printf(\"\\n\"); sortlist(); print(); insertATend(58); print(); printf(\"\\n\"); reverse(); print(); printf(\"\\n\\n\"); printf(\"length: \"); getlength(); return 0; } ","date":"2023-01-04","objectID":"/first_post/:8:0","tags":null,"title":"singly linked list","uri":"/first_post/"},{"categories":null,"content":"A Great Heading ","date":"2023-01-04","objectID":"/first_post/:8:1","tags":null,"title":"singly linked list","uri":"/first_post/"}]